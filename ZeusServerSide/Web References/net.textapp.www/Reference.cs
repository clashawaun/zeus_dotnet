//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ZeusServerSide.net.textapp.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://www.textapp.net/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyResponsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurveyResponsesAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSurveyResponsesAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnroutableSurveyResponsesAsXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrolIntoSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrolIntoSurveyWithReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnrolBatchIntoSurveyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelParticipantOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSReplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSMSInboundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscribersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPremiumSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPremiumSMSInboundOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPremiumSMSStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditsLeftOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestSendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestServiceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::ZeusServerSide.Properties.Settings.Default.ZeusServerSide_net_textapp_www_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendSMSCompletedEventHandler SendSMSCompleted;
        
        /// <remarks/>
        public event GetSurveyResponsesCompletedEventHandler GetSurveyResponsesCompleted;
        
        /// <remarks/>
        public event GetSurveyResponsesAsXMLCompletedEventHandler GetSurveyResponsesAsXMLCompleted;
        
        /// <remarks/>
        public event GetAllSurveyResponsesAsXMLCompletedEventHandler GetAllSurveyResponsesAsXMLCompleted;
        
        /// <remarks/>
        public event GetUnroutableSurveyResponsesAsXMLCompletedEventHandler GetUnroutableSurveyResponsesAsXMLCompleted;
        
        /// <remarks/>
        public event EnrolIntoSurveyCompletedEventHandler EnrolIntoSurveyCompleted;
        
        /// <remarks/>
        public event EnrolIntoSurveyWithReferenceCompletedEventHandler EnrolIntoSurveyWithReferenceCompleted;
        
        /// <remarks/>
        public event EnrolBatchIntoSurveyCompletedEventHandler EnrolBatchIntoSurveyCompleted;
        
        /// <remarks/>
        public event CancelParticipantCompletedEventHandler CancelParticipantCompleted;
        
        /// <remarks/>
        public event GetSMSStatusCompletedEventHandler GetSMSStatusCompleted;
        
        /// <remarks/>
        public event GetSMSReplyCompletedEventHandler GetSMSReplyCompleted;
        
        /// <remarks/>
        public event GetSMSInboundCompletedEventHandler GetSMSInboundCompleted;
        
        /// <remarks/>
        public event GetSubscribersCompletedEventHandler GetSubscribersCompleted;
        
        /// <remarks/>
        public event SendPremiumSMSCompletedEventHandler SendPremiumSMSCompleted;
        
        /// <remarks/>
        public event GetPremiumSMSInboundCompletedEventHandler GetPremiumSMSInboundCompleted;
        
        /// <remarks/>
        public event GetPremiumSMSStatusCompletedEventHandler GetPremiumSMSStatusCompleted;
        
        /// <remarks/>
        public event GetCreditsLeftCompletedEventHandler GetCreditsLeftCompleted;
        
        /// <remarks/>
        public event TestSendSMSCompletedEventHandler TestSendSMSCompleted;
        
        /// <remarks/>
        public event TestServiceCompletedEventHandler TestServiceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/SendSMS", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            object[] results = this.Invoke("SendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            this.SendSMSAsync(returnCSVString, externalLogin, password, clientBillingReference, clientMessageReference, originator, destinations, body, validity, characterSetID, replyMethodID, replyData, statusNotificationUrl, null);
        }
        
        /// <remarks/>
        public void SendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl, object userState) {
            if ((this.SendSMSOperationCompleted == null)) {
                this.SendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSOperationCompleted);
            }
            this.InvokeAsync("SendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl}, this.SendSMSOperationCompleted, userState);
        }
        
        private void OnSendSMSOperationCompleted(object arg) {
            if ((this.SendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSCompleted(this, new SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSurveyResponses", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSurveyResponses(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetSurveyResponses", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurveyResponsesAsync(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetSurveyResponsesAsync(returnCSVString, externalLogin, password, clientEnrolmentReference, startDate, endDate, surveyID, null);
        }
        
        /// <remarks/>
        public void GetSurveyResponsesAsync(bool returnCSVString, string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetSurveyResponsesOperationCompleted == null)) {
                this.GetSurveyResponsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyResponsesOperationCompleted);
            }
            this.InvokeAsync("GetSurveyResponses", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, this.GetSurveyResponsesOperationCompleted, userState);
        }
        
        private void OnGetSurveyResponsesOperationCompleted(object arg) {
            if ((this.GetSurveyResponsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyResponsesCompleted(this, new GetSurveyResponsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSurveyResponsesAsXML", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSurveyResponsesAsXML(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetSurveyResponsesAsXMLAsync(externalLogin, password, clientEnrolmentReference, startDate, endDate, surveyID, null);
        }
        
        /// <remarks/>
        public void GetSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetSurveyResponsesAsXMLOperationCompleted == null)) {
                this.GetSurveyResponsesAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurveyResponsesAsXMLOperationCompleted);
            }
            this.InvokeAsync("GetSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, this.GetSurveyResponsesAsXMLOperationCompleted, userState);
        }
        
        private void OnGetSurveyResponsesAsXMLOperationCompleted(object arg) {
            if ((this.GetSurveyResponsesAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurveyResponsesAsXMLCompleted(this, new GetSurveyResponsesAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetAllSurveyResponsesAsXML", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllSurveyResponsesAsXML(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetAllSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetAllSurveyResponsesAsXMLAsync(externalLogin, password, clientEnrolmentReference, startDate, endDate, surveyID, null);
        }
        
        /// <remarks/>
        public void GetAllSurveyResponsesAsXMLAsync(string externalLogin, string password, string clientEnrolmentReference, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetAllSurveyResponsesAsXMLOperationCompleted == null)) {
                this.GetAllSurveyResponsesAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSurveyResponsesAsXMLOperationCompleted);
            }
            this.InvokeAsync("GetAllSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        clientEnrolmentReference,
                        startDate,
                        endDate,
                        surveyID}, this.GetAllSurveyResponsesAsXMLOperationCompleted, userState);
        }
        
        private void OnGetAllSurveyResponsesAsXMLOperationCompleted(object arg) {
            if ((this.GetAllSurveyResponsesAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSurveyResponsesAsXMLCompleted(this, new GetAllSurveyResponsesAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetUnroutableSurveyResponsesAsXML", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUnroutableSurveyResponsesAsXML(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            object[] results = this.Invoke("GetUnroutableSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        startDate,
                        endDate,
                        surveyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnroutableSurveyResponsesAsXMLAsync(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID) {
            this.GetUnroutableSurveyResponsesAsXMLAsync(externalLogin, password, startDate, endDate, surveyID, null);
        }
        
        /// <remarks/>
        public void GetUnroutableSurveyResponsesAsXMLAsync(string externalLogin, string password, System.DateTime startDate, System.DateTime endDate, long surveyID, object userState) {
            if ((this.GetUnroutableSurveyResponsesAsXMLOperationCompleted == null)) {
                this.GetUnroutableSurveyResponsesAsXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnroutableSurveyResponsesAsXMLOperationCompleted);
            }
            this.InvokeAsync("GetUnroutableSurveyResponsesAsXML", new object[] {
                        externalLogin,
                        password,
                        startDate,
                        endDate,
                        surveyID}, this.GetUnroutableSurveyResponsesAsXMLOperationCompleted, userState);
        }
        
        private void OnGetUnroutableSurveyResponsesAsXMLOperationCompleted(object arg) {
            if ((this.GetUnroutableSurveyResponsesAsXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnroutableSurveyResponsesAsXMLCompleted(this, new GetUnroutableSurveyResponsesAsXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/EnrolIntoSurvey", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EnrolIntoSurvey(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID) {
            object[] results = this.Invoke("EnrolIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnrolIntoSurveyAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID) {
            this.EnrolIntoSurveyAsync(returnCSVString, externalLogin, password, destinations, surveyID, null);
        }
        
        /// <remarks/>
        public void EnrolIntoSurveyAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, object userState) {
            if ((this.EnrolIntoSurveyOperationCompleted == null)) {
                this.EnrolIntoSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrolIntoSurveyOperationCompleted);
            }
            this.InvokeAsync("EnrolIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID}, this.EnrolIntoSurveyOperationCompleted, userState);
        }
        
        private void OnEnrolIntoSurveyOperationCompleted(object arg) {
            if ((this.EnrolIntoSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrolIntoSurveyCompleted(this, new EnrolIntoSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/EnrolIntoSurveyWithReference", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EnrolIntoSurveyWithReference(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference) {
            object[] results = this.Invoke("EnrolIntoSurveyWithReference", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID,
                        clientEnrolmentReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnrolIntoSurveyWithReferenceAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference) {
            this.EnrolIntoSurveyWithReferenceAsync(returnCSVString, externalLogin, password, destinations, surveyID, clientEnrolmentReference, null);
        }
        
        /// <remarks/>
        public void EnrolIntoSurveyWithReferenceAsync(bool returnCSVString, string externalLogin, string password, string destinations, long surveyID, string clientEnrolmentReference, object userState) {
            if ((this.EnrolIntoSurveyWithReferenceOperationCompleted == null)) {
                this.EnrolIntoSurveyWithReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrolIntoSurveyWithReferenceOperationCompleted);
            }
            this.InvokeAsync("EnrolIntoSurveyWithReference", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        destinations,
                        surveyID,
                        clientEnrolmentReference}, this.EnrolIntoSurveyWithReferenceOperationCompleted, userState);
        }
        
        private void OnEnrolIntoSurveyWithReferenceOperationCompleted(object arg) {
            if ((this.EnrolIntoSurveyWithReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrolIntoSurveyWithReferenceCompleted(this, new EnrolIntoSurveyWithReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/EnrolBatchIntoSurvey", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EnrolBatchIntoSurvey(bool returnCSVString, string externalLogin, string password, string enrolmentBatchXML) {
            object[] results = this.Invoke("EnrolBatchIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        enrolmentBatchXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnrolBatchIntoSurveyAsync(bool returnCSVString, string externalLogin, string password, string enrolmentBatchXML) {
            this.EnrolBatchIntoSurveyAsync(returnCSVString, externalLogin, password, enrolmentBatchXML, null);
        }
        
        /// <remarks/>
        public void EnrolBatchIntoSurveyAsync(bool returnCSVString, string externalLogin, string password, string enrolmentBatchXML, object userState) {
            if ((this.EnrolBatchIntoSurveyOperationCompleted == null)) {
                this.EnrolBatchIntoSurveyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnrolBatchIntoSurveyOperationCompleted);
            }
            this.InvokeAsync("EnrolBatchIntoSurvey", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        enrolmentBatchXML}, this.EnrolBatchIntoSurveyOperationCompleted, userState);
        }
        
        private void OnEnrolBatchIntoSurveyOperationCompleted(object arg) {
            if ((this.EnrolBatchIntoSurveyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnrolBatchIntoSurveyCompleted(this, new EnrolBatchIntoSurveyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/CancelParticipant", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelParticipant(bool returnCSVString, string externalLogin, string password, string number, long surveyID) {
            object[] results = this.Invoke("CancelParticipant", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        surveyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelParticipantAsync(bool returnCSVString, string externalLogin, string password, string number, long surveyID) {
            this.CancelParticipantAsync(returnCSVString, externalLogin, password, number, surveyID, null);
        }
        
        /// <remarks/>
        public void CancelParticipantAsync(bool returnCSVString, string externalLogin, string password, string number, long surveyID, object userState) {
            if ((this.CancelParticipantOperationCompleted == null)) {
                this.CancelParticipantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelParticipantOperationCompleted);
            }
            this.InvokeAsync("CancelParticipant", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        surveyID}, this.CancelParticipantOperationCompleted, userState);
        }
        
        private void OnCancelParticipantOperationCompleted(object arg) {
            if ((this.CancelParticipantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelParticipantCompleted(this, new CancelParticipantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSMSStatus", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSMSStatus(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            object[] results = this.Invoke("GetSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            this.GetSMSStatusAsync(returnCSVString, externalLogin, password, clientMessageReference, null);
        }
        
        /// <remarks/>
        public void GetSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference, object userState) {
            if ((this.GetSMSStatusOperationCompleted == null)) {
                this.GetSMSStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSStatusOperationCompleted);
            }
            this.InvokeAsync("GetSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, this.GetSMSStatusOperationCompleted, userState);
        }
        
        private void OnGetSMSStatusOperationCompleted(object arg) {
            if ((this.GetSMSStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSStatusCompleted(this, new GetSMSStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSMSReply", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSMSReply(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            object[] results = this.Invoke("GetSMSReply", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSMSReplyAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            this.GetSMSReplyAsync(returnCSVString, externalLogin, password, clientMessageReference, null);
        }
        
        /// <remarks/>
        public void GetSMSReplyAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference, object userState) {
            if ((this.GetSMSReplyOperationCompleted == null)) {
                this.GetSMSReplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSReplyOperationCompleted);
            }
            this.InvokeAsync("GetSMSReply", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, this.GetSMSReplyOperationCompleted, userState);
        }
        
        private void OnGetSMSReplyOperationCompleted(object arg) {
            if ((this.GetSMSReplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSReplyCompleted(this, new GetSMSReplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSMSInbound", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSMSInbound(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            object[] results = this.Invoke("GetSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            this.GetSMSInboundAsync(returnCSVString, externalLogin, password, number, keyword, null);
        }
        
        /// <remarks/>
        public void GetSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword, object userState) {
            if ((this.GetSMSInboundOperationCompleted == null)) {
                this.GetSMSInboundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSInboundOperationCompleted);
            }
            this.InvokeAsync("GetSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword}, this.GetSMSInboundOperationCompleted, userState);
        }
        
        private void OnGetSMSInboundOperationCompleted(object arg) {
            if ((this.GetSMSInboundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSInboundCompleted(this, new GetSMSInboundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetSubscribers", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubscribers(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            object[] results = this.Invoke("GetSubscribers", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubscribersAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword) {
            this.GetSubscribersAsync(returnCSVString, externalLogin, password, number, keyword, null);
        }
        
        /// <remarks/>
        public void GetSubscribersAsync(bool returnCSVString, string externalLogin, string password, string number, string keyword, object userState) {
            if ((this.GetSubscribersOperationCompleted == null)) {
                this.GetSubscribersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscribersOperationCompleted);
            }
            this.InvokeAsync("GetSubscribers", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        number,
                        keyword}, this.GetSubscribersOperationCompleted, userState);
        }
        
        private void OnGetSubscribersOperationCompleted(object arg) {
            if ((this.GetSubscribersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscribersCompleted(this, new GetSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/SendPremiumSMS", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendPremiumSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl) {
            object[] results = this.Invoke("SendPremiumSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        rbid,
                        body,
                        validity,
                        characterSetID,
                        statusNotificationUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendPremiumSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl) {
            this.SendPremiumSMSAsync(returnCSVString, externalLogin, password, clientBillingReference, clientMessageReference, rbid, body, validity, characterSetID, statusNotificationUrl, null);
        }
        
        /// <remarks/>
        public void SendPremiumSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string rbid, string body, long validity, int characterSetID, string statusNotificationUrl, object userState) {
            if ((this.SendPremiumSMSOperationCompleted == null)) {
                this.SendPremiumSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPremiumSMSOperationCompleted);
            }
            this.InvokeAsync("SendPremiumSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        rbid,
                        body,
                        validity,
                        characterSetID,
                        statusNotificationUrl}, this.SendPremiumSMSOperationCompleted, userState);
        }
        
        private void OnSendPremiumSMSOperationCompleted(object arg) {
            if ((this.SendPremiumSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPremiumSMSCompleted(this, new SendPremiumSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetPremiumSMSInbound", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPremiumSMSInbound(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword) {
            object[] results = this.Invoke("GetPremiumSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        shortcode,
                        keyword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPremiumSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword) {
            this.GetPremiumSMSInboundAsync(returnCSVString, externalLogin, password, shortcode, keyword, null);
        }
        
        /// <remarks/>
        public void GetPremiumSMSInboundAsync(bool returnCSVString, string externalLogin, string password, string shortcode, string keyword, object userState) {
            if ((this.GetPremiumSMSInboundOperationCompleted == null)) {
                this.GetPremiumSMSInboundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPremiumSMSInboundOperationCompleted);
            }
            this.InvokeAsync("GetPremiumSMSInbound", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        shortcode,
                        keyword}, this.GetPremiumSMSInboundOperationCompleted, userState);
        }
        
        private void OnGetPremiumSMSInboundOperationCompleted(object arg) {
            if ((this.GetPremiumSMSInboundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPremiumSMSInboundCompleted(this, new GetPremiumSMSInboundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetPremiumSMSStatus", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPremiumSMSStatus(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            object[] results = this.Invoke("GetPremiumSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPremiumSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference) {
            this.GetPremiumSMSStatusAsync(returnCSVString, externalLogin, password, clientMessageReference, null);
        }
        
        /// <remarks/>
        public void GetPremiumSMSStatusAsync(bool returnCSVString, string externalLogin, string password, string clientMessageReference, object userState) {
            if ((this.GetPremiumSMSStatusOperationCompleted == null)) {
                this.GetPremiumSMSStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPremiumSMSStatusOperationCompleted);
            }
            this.InvokeAsync("GetPremiumSMSStatus", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientMessageReference}, this.GetPremiumSMSStatusOperationCompleted, userState);
        }
        
        private void OnGetPremiumSMSStatusOperationCompleted(object arg) {
            if ((this.GetPremiumSMSStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPremiumSMSStatusCompleted(this, new GetPremiumSMSStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/GetCreditsLeft", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCreditsLeft(bool returnCSVString, string externalLogin, string password) {
            object[] results = this.Invoke("GetCreditsLeft", new object[] {
                        returnCSVString,
                        externalLogin,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditsLeftAsync(bool returnCSVString, string externalLogin, string password) {
            this.GetCreditsLeftAsync(returnCSVString, externalLogin, password, null);
        }
        
        /// <remarks/>
        public void GetCreditsLeftAsync(bool returnCSVString, string externalLogin, string password, object userState) {
            if ((this.GetCreditsLeftOperationCompleted == null)) {
                this.GetCreditsLeftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditsLeftOperationCompleted);
            }
            this.InvokeAsync("GetCreditsLeft", new object[] {
                        returnCSVString,
                        externalLogin,
                        password}, this.GetCreditsLeftOperationCompleted, userState);
        }
        
        private void OnGetCreditsLeftOperationCompleted(object arg) {
            if ((this.GetCreditsLeftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditsLeftCompleted(this, new GetCreditsLeftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/TestSendSMS", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestSendSMS(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            object[] results = this.Invoke("TestSendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestSendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl) {
            this.TestSendSMSAsync(returnCSVString, externalLogin, password, clientBillingReference, clientMessageReference, originator, destinations, body, validity, characterSetID, replyMethodID, replyData, statusNotificationUrl, null);
        }
        
        /// <remarks/>
        public void TestSendSMSAsync(bool returnCSVString, string externalLogin, string password, string clientBillingReference, string clientMessageReference, string originator, string destinations, string body, long validity, int characterSetID, int replyMethodID, string replyData, string statusNotificationUrl, object userState) {
            if ((this.TestSendSMSOperationCompleted == null)) {
                this.TestSendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestSendSMSOperationCompleted);
            }
            this.InvokeAsync("TestSendSMS", new object[] {
                        returnCSVString,
                        externalLogin,
                        password,
                        clientBillingReference,
                        clientMessageReference,
                        originator,
                        destinations,
                        body,
                        validity,
                        characterSetID,
                        replyMethodID,
                        replyData,
                        statusNotificationUrl}, this.TestSendSMSOperationCompleted, userState);
        }
        
        private void OnTestSendSMSOperationCompleted(object arg) {
            if ((this.TestSendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestSendSMSCompleted(this, new TestSendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.textapp.net/TestService", RequestNamespace="http://www.textapp.net/", ResponseNamespace="http://www.textapp.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestService(bool returnCSVString, string externalLogin, string password) {
            object[] results = this.Invoke("TestService", new object[] {
                        returnCSVString,
                        externalLogin,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestServiceAsync(bool returnCSVString, string externalLogin, string password) {
            this.TestServiceAsync(returnCSVString, externalLogin, password, null);
        }
        
        /// <remarks/>
        public void TestServiceAsync(bool returnCSVString, string externalLogin, string password, object userState) {
            if ((this.TestServiceOperationCompleted == null)) {
                this.TestServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestServiceOperationCompleted);
            }
            this.InvokeAsync("TestService", new object[] {
                        returnCSVString,
                        externalLogin,
                        password}, this.TestServiceOperationCompleted, userState);
        }
        
        private void OnTestServiceOperationCompleted(object arg) {
            if ((this.TestServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestServiceCompleted(this, new TestServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void SendSMSCompletedEventHandler(object sender, SendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSurveyResponsesCompletedEventHandler(object sender, GetSurveyResponsesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurveyResponsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyResponsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSurveyResponsesAsXMLCompletedEventHandler(object sender, GetSurveyResponsesAsXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurveyResponsesAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurveyResponsesAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetAllSurveyResponsesAsXMLCompletedEventHandler(object sender, GetAllSurveyResponsesAsXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSurveyResponsesAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSurveyResponsesAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetUnroutableSurveyResponsesAsXMLCompletedEventHandler(object sender, GetUnroutableSurveyResponsesAsXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnroutableSurveyResponsesAsXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnroutableSurveyResponsesAsXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void EnrolIntoSurveyCompletedEventHandler(object sender, EnrolIntoSurveyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnrolIntoSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrolIntoSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void EnrolIntoSurveyWithReferenceCompletedEventHandler(object sender, EnrolIntoSurveyWithReferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnrolIntoSurveyWithReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrolIntoSurveyWithReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void EnrolBatchIntoSurveyCompletedEventHandler(object sender, EnrolBatchIntoSurveyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnrolBatchIntoSurveyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnrolBatchIntoSurveyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void CancelParticipantCompletedEventHandler(object sender, CancelParticipantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelParticipantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelParticipantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSMSStatusCompletedEventHandler(object sender, GetSMSStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSMSStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSMSReplyCompletedEventHandler(object sender, GetSMSReplyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSMSReplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSReplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSMSInboundCompletedEventHandler(object sender, GetSMSInboundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSMSInboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSInboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSubscribersCompletedEventHandler(object sender, GetSubscribersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscribersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscribersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void SendPremiumSMSCompletedEventHandler(object sender, SendPremiumSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendPremiumSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendPremiumSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetPremiumSMSInboundCompletedEventHandler(object sender, GetPremiumSMSInboundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPremiumSMSInboundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPremiumSMSInboundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetPremiumSMSStatusCompletedEventHandler(object sender, GetPremiumSMSStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPremiumSMSStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPremiumSMSStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetCreditsLeftCompletedEventHandler(object sender, GetCreditsLeftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditsLeftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditsLeftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void TestSendSMSCompletedEventHandler(object sender, TestSendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestSendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestSendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void TestServiceCompletedEventHandler(object sender, TestServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591